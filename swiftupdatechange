<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
提分王项目中用到的是Swift1.2升级到Swift2.0后，其中一些语法修改。

  
1.OS X 10.11CocoaPods淘宝镜像地址替换成https：

    $ gem sources --remove http://ruby.taobao.org/ --add https://ruby.taobao.org/
2.删掉字符串首位的空格

    var str = "  Hello, world "
    let whitespace = NSCharacterSet.whitespaceAndNewlineCharacterSet()
    str = str.stringByTrimmingCharactersInSet(whitespace)

3.UIButton初始化

    Swift 1.0 : _backButton = UIButton.buttonWithType(UIButtonType.Custom) as? UIButton
    Swift 2.0 : _backButton = UIButton(type: UIButtonType.Custom) as? UIButton
4.Array数组的变化

    Swift 1.0: currentData!.dictionary!.keys.array.count
    Swift 2.0: Array(currentData!.dictionary!.keys).count
5.Int、String的转换方法

    Swift 1.0: key.toInt()  toString(key)
    Swift 2.0: Int(key)  String(key)
6. 排序方法
    
    Swift 1.0: sorted
    Swift 2.0: sort()
7.日期初始化
    
    Swift 1.0: NSDate.new()
    Swift 2.0: NSDate()
8.异常捕获
 
    Swift 1.0: let content   = NSString(contentsOfFile: path!, encoding: NSUTF8StringEncoding, error: nil) 
    Swift 2.0: 
    do{
        let content = try NSString(contentsOfFile: path!, encoding: NSUTF8StringEncoding)
      } catch {
    }
9.网络请求协议需要更换为https，或者在Info.plist中添加

    NSAppTransportSecurity 和 NSAllowsArbitraryLoads YES
 
10.打印方法 全部变为:println

11.touchesBegan 代理方法

12.当与父类遵循相同的协议时会报错,删除子类遵循的协议

    Redundant conformance of '*****Controller' to protocol '****Delegate'
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>提分王项目中用到的是Swift1.2升级到Swift2.0后，其中一些语法修改。</p>

<p>1.OS X 10.11CocoaPods淘宝镜像地址替换成https：</p>

<pre><code>$ gem sources --remove http://ruby.taobao.org/ --add https://ruby.taobao.org/
</code></pre>

<p>2.删掉字符串首位的空格</p>

<pre><code>var str = "  Hello, world "
let whitespace = NSCharacterSet.whitespaceAndNewlineCharacterSet()
str = str.stringByTrimmingCharactersInSet(whitespace)
</code></pre>

<p>3.UIButton初始化</p>

<pre><code>Swift 1.0 : _backButton = UIButton.buttonWithType(UIButtonType.Custom) as? UIButton
Swift 2.0 : _backButton = UIButton(type: UIButtonType.Custom) as? UIButton
</code></pre>

<p>4.Array数组的变化</p>

<pre><code>Swift 1.0: currentData!.dictionary!.keys.array.count
Swift 2.0: Array(currentData!.dictionary!.keys).count
</code></pre>

<p>5.Int、String的转换方法</p>

<pre><code>Swift 1.0: key.toInt()  toString(key)
Swift 2.0: Int(key)  String(key)
</code></pre>

<p>6. 排序方法</p>

<pre><code>Swift 1.0: sorted
Swift 2.0: sort()
</code></pre>

<p>7.日期初始化</p>

<pre><code>Swift 1.0: NSDate.new()
Swift 2.0: NSDate()
</code></pre>

<p>8.异常捕获</p>

<pre><code>Swift 1.0: let content   = NSString(contentsOfFile: path!, encoding: NSUTF8StringEncoding, error: nil) 
Swift 2.0: 
do{
    let content = try NSString(contentsOfFile: path!, encoding: NSUTF8StringEncoding)
  } catch {
}
</code></pre>

<p>9.网络请求协议需要更换为https，或者在Info.plist中添加</p>

<pre><code>NSAppTransportSecurity 和 NSAllowsArbitraryLoads YES
</code></pre>

<p>10.打印方法 全部变为:println</p>

<p>11.touchesBegan 代理方法</p>

<p>12.当与父类遵循相同的协议时会报错,删除子类遵循的协议</p>

<pre><code>Redundant conformance of '*****Controller' to protocol '****Delegate'
</code></pre>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "swiftupdatechange";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
